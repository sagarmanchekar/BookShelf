Function freezeOBJ()
{
	“use strict”;
	Const MATH_CONSTRAINTS={
	PI:3.14
	};   //object

	Object.freeze(MATH_CONSTRAINTS);    //doesn’t allow to mutate
	try{
	MATH_CONSTRAINTS.PI=99;
	}
	
	catch(ex){
	console.log(ex);
	}
	return MATH_CONSTRAINTS;
}

const PI=freeObj(); //calling

//error


*************************************
//Anonymous function

var magic =function(){
return new Date();
}

OR
//arrow function
const magic =()=>new Date();

var myconcat=function(arr1,arr2){return arr1.concat(arr2);}
OR
var myconcat=(arr1,arr2)=> arr1.concat(arr2);

myconcat([1,2],[2,3,4]);

**************************************
higher order arrow function

const realnumarr=[4,5.6,-9.8,-2,2];

const squareList=(arr)=>{
	const squaredIntegeres=arr.filter(num=>Number.isInteger(num) && num>0).map(x => x*x);
	return squaredIntegeres;
};

const squaredIntegeres=squareList(realnumarr);
cosole.log(squaredIntegeres);   // output= 16,4

******************************************
//default value

const increment = (function() {
  return function increment(number, value = 1) {
    return number + value;
  };
})();
console.log(increment(5, 2)); 
console.log(increment(5));

***************************************

without Rest operator

const sum = (function() {
  return function sum(x, y, z) {
    const args = [ x, y, z ];
    return args.reduce((a, b) => a + b, 0);
  };
})();
console.log(sum(1, 2, 3));

****with Rest operator

const sum = (function() {
  return function sum(...args) {
    return args.reduce((a, b) => a + b, 0);
  };
})();
console.log(sum(1, 2, 3, 4)); //can pass any no of argument


***************************************

**spread operator***

similar to rest but spreads

const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
(function() {
  arr2 = arr1; // shallow copy
  arr1[0] = 'potato'
})();
console.log(arr2);   //potato JAN feb ....


const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
(function() {
  arr2 = [...arr1]; // actually copying all data 
  arr1[0] = 'potato'
})();
console.log(arr2);   //[JAn FEB  etc]



**************************************************

DeStructuring Assignment


var voxel = {x: 3.6, y: 7.4, z: 6.54 };

var a = voxel.x; // x = 3.6    //normal way
var b = voxel.y; // y = 7.4    //normal way
var c = voxel.z; // z = 6.54    //normal way


//DeStructuring way (copy member x,y,z from voxel in a,b,c variables)
const { x : a, y : b, z : c } = voxel; // a = 3.6, b = 7.4, c = 6.54    

eg:


const AVG_TEMPERATURES = {
  today: 77.5,
  tomorrow: 79
};

function getTempOfTmrw(avgTemperatures) {
  "use strict";
  // change code below this line
  const { tomorrow : tempOfTomorrow } = avgTemperatures; // get the value of tomorrow from object AVG_TEMPERATURES and copy it to tempOfTomorrow
  // change code above this line
  return tempOfTomorrow;
}

console.log(getTempOfTmrw(AVG_TEMPERATURES)); // should be 79

*********************************

use destructuring to assign variables from nested objects

const LOCAL_FORECAST = {
  today: { min: 72, max: 83 },
  tomorrow: { min: 73.3, max: 84.6 }
};

function getMaxOfTmrw(forecast) {
  "use strict";

  const { tomorrow : { max : maxOfTomorrow }} = forecast; 

  return maxOfTomorrow;
}

console.log(getMaxOfTmrw(LOCAL_FORECAST));   //output 84.6

****************************************
using destructuring assignment to assign variables from arrays


const [z, x, , y] = [1, 2, 3, 4, 5, 6];
console.log(z, x, y);    //output 1,2,4


let a = 8, b = 6;
(() => {
  "use strict";

})();



-------------------------------

const [z, x, , y] = [1, 2, 3, 4, 5, 6];
console.log(z, x, y);    //1,2,4

let a = 8, b = 6;
(() => {
  "use strict";
  [a, b] = [b, a]    //swaping
})();
console.log(a);   //6 
console.log(b);   //8


*************************************
DeStructuring assignment with  the rest operator to reassign array elements

const source = [1,2,3,4,5,6,7,8,9,10];
function removeFirstTwo(list) {

  const [ , , ...arr] = list; 

  return arr;
}
const arr = removeFirstTwo(source);
console.log(arr);    >[3, 4, 5, 6, 7, 8, 9, 10]
console.log(source);   >[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


*********************************************

using DeStructuring assignment to pass an object as function parameter

const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};


1) const half = (function() {

  return function half(stats) {
    return (stats.max + stats.min) / 2.0;
  };

})();
			OR
			
2)  const half = (function() {

  return function half({ max, min }) {     //only passing which we need i.e max and min
    return (max + min) / 2.0;
  };

})();


console.log(stats); 
console.log(half(stats)); 



********************************************

Create strings using Template litterals

eg 1

	const person = {
	  name: "Zodiac Hasbro",
	  age: 56
	};

	// Template literal with multi-line and string interpolation
	const greeting = `Hello, my name is ${person.name}!
	I am ${person.age} years old.`;

console.log(greeting);   //output  >Hello, my name is Zodiac Hasbro! I am 56 years old.

eg2 


	const result = {
	  success: ["max-length", "no-amd", "prefer-arrow-functions"],
	  failure: ["no-var", "var-on-top", "linebreak"],
	  skipped: ["id-blacklist", "no-dup-keys"]
	};
	
	function makeList(arr) {
	  const resultDisplayArray = [];
	  
	  for (let i = 0; i < arr.length; i++) {
		resultDisplayArray.push(`<li class="text-warning">${arr[i]}</li>`)
	  }

	  return resultDisplayArray;
	}
	//expected output
	/**
	 * makeList(result.failure) should return:
	 * [ `<li class="text-warning">no-var</li>`,
	 *   `<li class="text-warning">var-on-top</li>`, 
	 *   `<li class="text-warning">linebreak</li>` ]
	 **/
	 
	const resultDisplayArray = makeList(result.failure);

	console.log(resultDisplayArray)


******************************************************

Write Concise Object Litterals Declarations using Simple fields

eg1 
	const createPerson = (name, age, gender) => {    //arrow function

	  return {								//returns object
		name: name,
		age: age,
		gender: gender
	  };

	};
	console.log(createPerson("Zodiac Hasbro", 56, "male"));  
	//output  >{name: "Zodiac Hasbro", age: 56, gender: "male"}
	
				OR
	
 const createPerson = (name, age, gender) => ( { name, age, gender });   //automatically return object
console.log(createPerson("Zodiac Hasbro", 56, "male")); 

******************************************************************

Write Concise Declarative Functions with ES6


const bicycle = {
  gear: 2,
  setGear: function(newGear) {					//function in object
    "use strict";
    this.gear = newGear;
  }
};

bicycle.setGear(3);
console.log(bicycle.gear);					//op 3

			OR short way
			
			
	const bicycle = {
	  gear: 2,
	  setGear(newGear) {					//function in object
		"use strict";
		this.gear = newGear;
	  }
	};

	bicycle.setGear(3);
	console.log(bicycle.gear);       //op 3

			
***********************************************************************************

Use class Syntax to Define a Constructor Function


older way

	var SpaceShuttle = function(targetPlanet){
	  this.targetPlanet = targetPlanet;
	}
	var zeus = new SpaceShuttle('Jupiter');

	console.log(zeus.targetPlanet)   //op Jupiter

			
new way bcoz of class and  constructor keyword
						
				class SpaceShuttle {
			  constructor(targetPlanet){
				this.targetPlanet = targetPlanet;
			  }
			}
			var zeus = new SpaceShuttle('Jupiter');

			console.log(zeus.targetPlanet)

************************************************************************

Use getters and setters to Control Access to an Object

class Book {
  constructor(author) {
    this._author = author;
  }
  // getter
  get writer(){
    return this._author;
  }
  // setter
  set writer(updatedAuthor){
    this._author = updatedAuthor;
  }
}


example:

		function makeClass() {
	  class Thermostat {
		constructor(temp) {
		  this._temp = 5/9 * (temp - 32);
		}
		get temperature(){
		  return this._temp;
		}
		set temperature(updatedTemp){
		  this._temp = updatedTemp;
		}
	  }
	  return Thermostat;
	}

	const Thermostat = makeClass();
	const thermos = new Thermostat(76); 
	let temp = thermos.temperature; 
	thermos.temperature = 26;
	temp = thermos.temperature; 

**********************************************************

Understand the Differences Between import and require

**index.js**

import { capitalizeString } from "./string_function"     //here  capitalizeString is function 
															from string_function file
const cap = capitalizeString("hello!");

console.log(cap);


**string_function.js**

export const capitalizeString = str => str.toUpperCase()   //arrow  function


*************************************************************************
Use export to Reuse a Code Block


const capitalizeString = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export { capitalizeString };

export const foo = "bar";
export const bar = "foo";

****************************************************************************

Use * to Import Everything from a File

import * as capitalizeStrings from "capitalize_strings";    //here capitalizeString is object, we can give any name


********************************************************************************
Create an Export Fallback with export default

export default function subtract(x,y) {return x - y;}     //when  we want to export only onething from a file.


*****************************************************************************************
Import a Default Export

import subtract from "math_functions";  //here math_functions is file name and subtract is function in it.
											//here we are not using {} since we are importing default
subtract(7,4);


***************************************************************************************

